import { useParams, Link } from 'react-router-dom';
import backpacksData from '../data';
import { useEffect, useState } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

export default function BackpackPage() {
  const { id } = useParams();
  const decodedName = decodeURIComponent(id);
  const backpack = backpacksData.find(b => b.name === decodedName);
  const [redditData, setRedditData] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [gridImages, setGridImages] = useState([]);
  const [discussions, setDiscussions] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [threadImages, setThreadImages] = useState([]);
  const [currentDiscussionPage, setCurrentDiscussionPage] = useState(1);
  const [currentThumbnailPage, setCurrentThumbnailPage] = useState(1);
  const threadsPerPage = 5;
  const thumbnailsPerPage = 8;
  const maxThumbnails = 16;

  useEffect(() => {
    async function fetchData() {
      try {
        // Fetch Reddit data
        const redditResponse = await fetch(`/src/data/reddit_data/${backpack.brand.toLowerCase()}_${backpack.model.toLowerCase().replace(/\s+/g, '_')}.json`);
        const redditData = await redditResponse.json();
        
        // Fetch analysis data
        try {
          const analysisResponse = await fetch(`/src/data/analysis/${backpack.brand.toLowerCase()}_${backpack.model.toLowerCase().replace(/\s+/g, '_')}.json`);
          const analysisData = await analysisResponse.json();
          setAnalysis(analysisData.analysis);
        } catch (error) {
          console.error('Analysis data not found:', error);
        }

        // Get unique threads with images for the grid
        const uniqueThreads = [];
        const seenUrls = new Set();
        
        for (const item of redditData.imageThreads) {
          if (!seenUrls.has(item.thread.url)) {
            uniqueThreads.push(item);
            seenUrls.add(item.thread.url);
          }
        }
        
        setRedditData(redditData);
        
        // Only paginate through the first 16 threads for grid images
        const limitedThreads = uniqueThreads.slice(0, maxThumbnails);
        const startIndex = (currentThumbnailPage - 1) * thumbnailsPerPage;
        const endIndex = startIndex + thumbnailsPerPage;
        setGridImages(limitedThreads.slice(startIndex, endIndex));
        
        // For discussions, get all unique threads from redditData
        const allThreads = redditData.imageThreads.reduce((acc, item) => {
          if (!acc.some(thread => thread.thread.url === item.thread.url)) {
            acc.push(item);
          }
          return acc;
        }, []);
        
        // Sort discussions by score (highest first)
        const sortedThreads = allThreads.sort((a, b) => b.thread.score - a.thread.score);
        setDiscussions(sortedThreads);
        
      } catch (error) {
        console.error('Error loading data:', error);
      }
    }
    fetchData();
  }, [backpack, currentThumbnailPage]);

  // When a thumbnail is clicked, find all images from the same thread
  const handleImageClick = (item) => {
    const threadUrl = item.thread.url;
    const imagesFromThread = redditData.imageThreads.filter(
      img => img.thread.url === threadUrl
    );
    const index = imagesFromThread.findIndex(img => img.image === item.image);
    
    setSelectedImage(item);
    setThreadImages(imagesFromThread);
    setCurrentImageIndex(index);
  };

  // Add this function near handleImageClick
  const handleThreadClick = (item) => {
    // Find all images from this thread
    const imagesFromThread = redditData.imageThreads.filter(
      img => img.thread.url === item.thread.url
    );
    
    // If the thread has images, show the first one
    if (imagesFromThread.length > 0) {
      setSelectedImage(imagesFromThread[0]);
      setThreadImages(imagesFromThread);
      setCurrentImageIndex(0);
    }
  };

  const handlePrevImage = (e) => {
    e.stopPropagation();
    setCurrentImageIndex((prev) => {
      const newIndex = prev - 1;
      if (newIndex < 0) {
        // Find the current thread's URL
        const currentThreadUrl = threadImages[0].thread.url;
        
        // Find the index of the current thread in redditData.imageThreads
        const currentThreadFirstImageIndex = redditData.imageThreads.findIndex(
          img => img.thread.url === currentThreadUrl
        );
        
        // Find the previous thread's first image
        const prevThreadImages = redditData.imageThreads.slice(0, currentThreadFirstImageIndex)
          .filter(img => img.thread.url !== currentThreadUrl);
        
        if (prevThreadImages.length > 0) {
          // Get all images from the previous thread
          const prevThreadUrl = prevThreadImages[prevThreadImages.length - 1].thread.url;
          const allPrevThreadImages = redditData.imageThreads.filter(
            img => img.thread.url === prevThreadUrl
          );
          
          // Update the state to show the last image of the previous thread
          setThreadImages(allPrevThreadImages);
          setSelectedImage(allPrevThreadImages[allPrevThreadImages.length - 1]);
          return allPrevThreadImages.length - 1;
        }
        
        // If no previous thread exists, stay at the current thread
        return 0;
      }
      return newIndex;
    });
  };

  const handleNextImage = (e) => {
    e.stopPropagation();
    setCurrentImageIndex((prev) => {
      const newIndex = prev + 1;
      if (newIndex >= threadImages.length) {
        // Find the current thread's URL
        const currentThreadUrl = threadImages[0].thread.url;
        
        // Find the index of the current thread in redditData.imageThreads
        const currentThreadFirstImageIndex = redditData.imageThreads.findIndex(
          img => img.thread.url === currentThreadUrl
        );
        
        // Find the next thread's first image
        const nextThreadImages = redditData.imageThreads.slice(currentThreadFirstImageIndex + 1)
          .filter(img => img.thread.url !== currentThreadUrl);
        
        if (nextThreadImages.length > 0) {
          // Get all images from the next thread
          const nextThreadUrl = nextThreadImages[0].thread.url;
          const allNextThreadImages = redditData.imageThreads.filter(
            img => img.thread.url === nextThreadUrl
          );
          
          // Update the state to show the first image of the next thread
          setThreadImages(allNextThreadImages);
          setSelectedImage(allNextThreadImages[0]);
          return 0;
        }
        
        // If no next thread exists, cycle back to the first thread
        return 0;
      }
      return newIndex;
    });
  };

  // Add escape key handler
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setSelectedImage(null);
        setThreadImages([]);
        setCurrentImageIndex(0);
      }
    };

    if (selectedImage) {
      window.addEventListener('keydown', handleEscape);
      return () => window.removeEventListener('keydown', handleEscape);
    }
  }, [selectedImage]);

  // Add arrow key navigation
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'ArrowLeft') {
        handlePrevImage(e);
      } else if (e.key === 'ArrowRight') {
        handleNextImage(e);
      }
    };

    if (selectedImage) {
      window.addEventListener('keydown', handleKeyDown);
      return () => window.removeEventListener('keydown', handleKeyDown);
    }
  }, [selectedImage, threadImages]);

  if (!backpack) {
    return <div className="p-4">Backpack not found</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-5xl">
      {/* Back Button */}
      <Link 
        to="/" 
        className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors mb-6"
      >
        <ChevronLeft className="w-5 h-5" />
        <span>Back to All Backpacks</span>
      </Link>

      <div className="border border-gray-200 rounded-2xl p-8">
        {/* Header */}
        <div className="mb-12">
          <h1 className="text-4xl font-bold mb-2">{backpack.brand} {backpack.name}</h1>
          <p className="text-gray-500 text-lg">
            {backpack.brand} • {backpack.volume}L • {backpack.weight}kg • ${backpack.price} — {backpack.dimensions} • 450D recycled twist dobby polyester • Fits up to 16" laptop • {backpack.carryOnLegal}
          </p>
        </div>

        {/* Pros & Cons */}
        {analysis && (
          <section className="mb-12">
            <h2 className="text-2xl font-bold mb-6">Community Analysis</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Pros */}
              <div className="bg-green-50 p-6 rounded-xl">
                <h3 className="text-lg font-semibold text-green-800 mb-4">Pros</h3>
                <ul className="space-y-2">
                  {analysis.pros.map((pro, index) => (
                    <li key={index} className="flex items-start">
                      <span className="text-green-600 mr-2">✓</span>
                      <span>{pro}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              {/* Cons */}
              <div className="bg-red-50 p-6 rounded-xl">
                <h3 className="text-lg font-semibold text-red-800 mb-4">Cons</h3>
                <ul className="space-y-2">
                  {analysis.cons.map((con, index) => (
                    <li key={index} className="flex items-start">
                      <span className="text-red-600 mr-2">×</span>
                      <span>{con}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            
            {/* Summary */}
            <div className="mt-6 text-gray-700 bg-gray-50 p-6 rounded-xl">
              <p className="italic">{analysis.summary}</p>
            </div>
          </section>
        )}

        {/* Community Photos */}
        <section className="mb-12">
          <h2 className="text-2xl font-bold mb-6">Photos from Reddit</h2>
          <div className="relative">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {gridImages.map((item, index) => (
                <button
                  key={index}
                  onClick={() => handleImageClick(item)}
                  className="block group w-full cursor-pointer"
                >
                  <div className="relative aspect-square overflow-hidden rounded-lg shadow-md">
                    <img
                      src={item.image}
                      alt={item.thread.title}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-end">
                      <div className="p-2 w-full text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <p className="text-sm truncate">{item.thread.title}</p>
                      </div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
            
            {/* Navigation Arrows */}
            {currentThumbnailPage > 1 && (
              <button 
                onClick={() => setCurrentThumbnailPage(prev => prev - 1)}
                className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-12 bg-white p-2 rounded-full shadow-lg hover:bg-gray-50 transition-colors"
                aria-label="Previous page"
              >
                <ChevronLeft className="w-6 h-6" />
              </button>
            )}
            
            {currentThumbnailPage === 1 && (
              <button 
                onClick={() => setCurrentThumbnailPage(2)}
                className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-12 bg-white p-2 rounded-full shadow-lg hover:bg-gray-50 transition-colors"
                aria-label="Next page"
              >
                <ChevronRight className="w-6 h-6" />
              </button>
            )}
          </div>
        </section>

        {/* Community Discussions */}
        <section className="mb-12">
          <h2 className="text-2xl font-bold mb-6">Community Discussions</h2>
          <div className="space-y-4">
            {discussions
              .slice((currentDiscussionPage - 1) * threadsPerPage, currentDiscussionPage * threadsPerPage)
              .map((item, index) => (
                <button 
                  key={index}
                  onClick={() => handleThreadClick(item)}
                  className="block w-full text-left bg-white rounded-xl border border-gray-200 p-4 hover:border-gray-300 hover:shadow-md transition-all"
                >
                  {/* Thread Title and Metadata */}
                  <div className="flex items-start gap-4">
                    {/* Content Section - Limited width and truncated */}
                    <div className="flex-1 min-w-0">
                      <h3 className="text-lg font-medium text-gray-900 mb-2 truncate">
                        {item.thread.title}
                      </h3>
                      
                      <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-3">
                        <div className="flex items-center gap-1">
                          <svg className="w-4 h-4 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                          </svg>
                          <span>{item.thread.score} points</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <svg className="w-4 h-4 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clipRule="evenodd" />
                          </svg>
                          <span>{item.thread.numComments} comments</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <span className="text-gray-500">by u/{item.thread.author}</span>
                        </div>
                      </div>

                      {/* Thread Content Preview */}
                      {item.thread.selftext && (
                        <div className="text-sm text-gray-600 line-clamp-2 mb-3">
                          {item.thread.selftext}
                        </div>
                      )}

                      {/* First Comment Preview */}
                      {item.thread.comments?.[0] && (
                        <div className="text-sm bg-gray-50 p-3 rounded-lg">
                          <p className="text-gray-500 mb-1">Top comment:</p>
                          <p className="text-gray-600 line-clamp-2">{item.thread.comments[0].body}</p>
                        </div>
                      )}
                    </div>

                    {/* Thread Thumbnail - Fixed width */}
                    {item.image && (
                      <div className="flex-shrink-0 w-24 h-24 rounded-lg overflow-hidden">
                        <img 
                          src={item.image} 
                          alt={item.thread.title}
                          className="w-full h-full object-cover"
                        />
                      </div>
                    )}
                  </div>
                </button>
            ))}
          </div>
          
          {/* Pagination */}
          {discussions.length > threadsPerPage && (
            <div className="mt-8 flex justify-center items-center gap-4">
              <button
                onClick={() => setCurrentDiscussionPage(prev => Math.max(1, prev - 1))}
                disabled={currentDiscussionPage === 1}
                className={`flex items-center gap-1 px-3 py-2 rounded-lg transition-colors ${
                  currentDiscussionPage === 1
                    ? 'text-gray-400 cursor-not-allowed'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                <ChevronLeft className="w-5 h-5" />
                Previous
              </button>

              {/* Page Numbers */}
              <div className="flex items-center gap-2">
                {(() => {
                  const totalPages = Math.ceil(discussions.length / threadsPerPage);
                  const pages = [];
                  
                  // Always show first page
                  if (currentDiscussionPage > 3) {
                    pages.push(
                      <button
                        key={1}
                        onClick={() => setCurrentDiscussionPage(1)}
                        className="w-8 h-8 rounded-full flex items-center justify-center text-gray-600 hover:bg-gray-100"
                      >
                        1
                      </button>
                    );
                    if (currentDiscussionPage > 4) {
                      pages.push(
                        <span key="dots1" className="px-1">...</span>
                      );
                    }
                  }

                  // Show current page and neighbors
                  for (let i = Math.max(1, currentDiscussionPage - 1); 
                       i <= Math.min(totalPages, currentDiscussionPage + 1); 
                       i++) {
                    pages.push(
                      <button
                        key={i}
                        onClick={() => setCurrentDiscussionPage(i)}
                        className={`w-8 h-8 rounded-full flex items-center justify-center transition-colors ${
                          currentDiscussionPage === i
                            ? 'bg-black text-white'
                            : 'text-gray-600 hover:bg-gray-100'
                        }`}
                      >
                        {i}
                      </button>
                    );
                  }

                  // Always show last page
                  if (currentDiscussionPage < totalPages - 2) {
                    if (currentDiscussionPage < totalPages - 3) {
                      pages.push(
                        <span key="dots2" className="px-1">...</span>
                      );
                    }
                    pages.push(
                      <button
                        key={totalPages}
                        onClick={() => setCurrentDiscussionPage(totalPages)}
                        className="w-8 h-8 rounded-full flex items-center justify-center text-gray-600 hover:bg-gray-100"
                      >
                        {totalPages}
                      </button>
                    );
                  }

                  return pages;
                })()}
              </div>

              <button
                onClick={() => setCurrentDiscussionPage(prev => 
                  Math.min(Math.ceil(discussions.length / threadsPerPage), prev + 1)
                )}
                disabled={currentDiscussionPage >= Math.ceil(discussions.length / threadsPerPage)}
                className={`flex items-center gap-1 px-3 py-2 rounded-lg transition-colors ${
                  currentDiscussionPage >= Math.ceil(discussions.length / threadsPerPage)
                    ? 'text-gray-400 cursor-not-allowed'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                }`}
              >
                Next
                <ChevronRight className="w-5 h-5" />
              </button>
            </div>
          )}
        </section>

        {/* Purchase Button */}
        <div className="flex justify-center">
          <a
            href={`https://www.amazon.com/s?k=${encodeURIComponent(`${backpack.brand} ${backpack.name}`)}`}
            target="_blank"
            rel="noopener noreferrer"
            className="bg-black text-white px-8 py-3 rounded-lg text-lg font-medium hover:bg-gray-800 transition-colors"
          >
            Purchase on Amazon
          </a>
        </div>
      </div>

      {/* Enhanced Full-size Image Modal with Gallery */}
      {selectedImage && threadImages.length > 0 && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4"
          onClick={() => {
            setSelectedImage(null);
            setThreadImages([]);
            setCurrentImageIndex(0);
          }}
        >
          <div className="max-w-7xl w-full h-[90vh] relative flex flex-col items-center justify-center">
            <button
              onClick={() => {
                setSelectedImage(null);
                setThreadImages([]);
                setCurrentImageIndex(0);
              }}
              className="absolute -top-12 right-0 text-white hover:text-gray-300 text-4xl"
            >
              ×
            </button>

            {/* Main Content Container - Image on Left, Thread Info on Right */}
            <div className="w-full h-full flex gap-4" onClick={(e) => e.stopPropagation()}>
              {/* Left Side - Image and Thumbnails */}
              <div className="flex-1 flex flex-col">
                {/* Main Image Container */}
                <div className="relative inline-block max-h-[70vh] w-full flex items-center justify-center bg-black bg-opacity-50 rounded-lg">
                  {/* Navigation Buttons */}
                  {threadImages.length > 1 && (
                    <>
                      <button
                        onClick={handlePrevImage}
                        className="absolute left-4 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-75 text-white p-2 rounded-full"
                      >
                        <ChevronLeft className="w-6 h-6" />
                      </button>
                      <button
                        onClick={handleNextImage}
                        className="absolute right-4 top-1/2 -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-75 text-white p-2 rounded-full"
                      >
                        <ChevronRight className="w-6 h-6" />
                      </button>
                    </>
                  )}

                  {/* Main Image */}
                  <img
                    src={threadImages[currentImageIndex].image}
                    alt={threadImages[currentImageIndex].thread.title}
                    className="max-h-[70vh] max-w-full object-contain"
                  />
                </div>

                {/* Thumbnails */}
                {threadImages.length > 1 && (
                  <div className="mt-4 flex gap-2 overflow-x-auto max-w-full p-2">
                    {threadImages.map((img, idx) => (
                      <button
                        key={idx}
                        onClick={() => setCurrentImageIndex(idx)}
                        className={`flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 transition-all ${
                          idx === currentImageIndex ? 'border-blue-500 scale-110' : 'border-transparent hover:border-gray-300'
                        }`}
                      >
                        <img
                          src={img.image}
                          alt={`Thumbnail ${idx + 1}`}
                          className="w-full h-full object-cover"
                        />
                      </button>
                    ))}
                  </div>
                )}
              </div>

              {/* Right Side - Thread Information */}
              <div className="w-96 bg-white bg-opacity-10 p-6 rounded-lg overflow-y-auto">
                <div className="space-y-6 text-white">
                  {/* Thread Title */}
                  <h3 className="text-xl font-semibold">
                    {threadImages[currentImageIndex].thread.title}
                  </h3>

                  {/* Thread Stats */}
                  <div className="flex items-center gap-4 text-sm text-gray-300">
                    <div className="flex items-center gap-1">
                      <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                      </svg>
                      <span>{threadImages[currentImageIndex].thread.score} points</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clipRule="evenodd" />
                      </svg>
                      <span>{threadImages[currentImageIndex].thread.numComments} comments</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span>by u/{threadImages[currentImageIndex].thread.author}</span>
                    </div>
                  </div>

                  {/* Original Post Content */}
                  {threadImages[currentImageIndex].thread.selftext && (
                    <div className="prose prose-invert">
                      <div className="text-gray-300 text-sm leading-relaxed whitespace-pre-wrap">
                        {threadImages[currentImageIndex].thread.selftext}
                      </div>
                    </div>
                  )}

                  {/* Comments Section */}
                  {threadImages[currentImageIndex].thread.comments?.length > 0 && (
                    <div className="space-y-4">
                      <h4 className="text-lg font-semibold border-t border-gray-700 pt-4">Top Comments</h4>
                      {threadImages[currentImageIndex].thread.comments.map((comment, idx) => (
                        <div key={idx} className="space-y-2">
                          {/* Comment */}
                          <div className="bg-white bg-opacity-5 rounded p-3">
                            <div className="flex items-center gap-2 text-sm text-gray-400 mb-2">
                              <span className="font-medium">u/{comment.author}</span>
                              <span>•</span>
                              <span>{comment.score} points</span>
                            </div>
                            <div className="text-sm text-gray-300 whitespace-pre-wrap">
                              {comment.body}
                            </div>

                            {/* Replies */}
                            {comment.replies?.length > 0 && (
                              <div className="mt-2 space-y-2">
                                {comment.replies.map((reply, replyIdx) => (
                                  <div key={replyIdx} className="ml-4 pl-4 border-l border-gray-700">
                                    <div className="flex items-center gap-2 text-sm text-gray-400 mb-1">
                                      <span className="font-medium">u/{reply.author}</span>
                                      <span>•</span>
                                      <span>{reply.score} points</span>
                                    </div>
                                    <div className="text-sm text-gray-300 whitespace-pre-wrap">
                                      {reply.body}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* View on Reddit Button */}
                  <a
                    href={threadImages[currentImageIndex].thread.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 bg-[#FF4500] text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition-colors"
                  >
                    <svg className="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm5.93 11.71c-.39.39-.91.59-1.42.59-.51 0-1.03-.2-1.42-.59l-3.09-3.09-3.09 3.09c-.39.39-.91.59-1.42.59-.51 0-1.03-.2-1.42-.59-.79-.79-.79-2.05 0-2.84l4.51-4.51c.39-.39.91-.59 1.42-.59s1.03.2 1.42.59l4.51 4.51c.79.79.79 2.05 0 2.84z"/>
                    </svg>
                    View on Reddit
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
